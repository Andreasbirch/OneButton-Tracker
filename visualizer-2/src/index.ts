import { app, BrowserWindow, ipcMain } from 'electron';
import path from 'path';
import {WebUSB} from 'usb';
// import driveList from 'driveList';
const driveList = require('drivelist');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  webusb.addEventListener('connect', handleDeviceConnect);
  webusb.addEventListener('disconnect', handleDeviceDisconnect);
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  webusb.removeEventListener('connect', showDevices);
  webusb.removeEventListener('disconnect', showDevices);
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on('send-message', (event, arg) => {
  //execute tasks on behalf of renderer process 
  console.log(arg) // prints "ping"
});

const webusb = new WebUSB({
  allowAllDevices: true
});

const getCircuitpyDrives = async () => {
  const drives = await driveList.list();

  if (!drives || drives.length === 0) {
    console.log("No devices found");
  } else {
    const usbDrives = drives.filter((drive:any) => drive.isUSB);
    if (usbDrives.length > 0) {
      const circuitpyDrives = usbDrives.filter((drive:any) =>
        drive.mountpoints.some((o:any) => o.label === 'CIRCUITPY')
      );
      if (circuitpyDrives.length > 0) {
        const circuitpyMountPoints = circuitpyDrives.map((drive:any) => {
          const circuitpyMountPoint = drive.mountpoints.find((o:any) => o.label === 'CIRCUITPY');
          return `${circuitpyMountPoint.label} ${circuitpyMountPoint.path}`;
        });
        return circuitpyMountPoints;
      }
    }
  }
  return null;
}

const handleDeviceConnect = async () => {
  let data = "No devices found";
  let attempts = 60;
  for (let attempt = 0; attempt < attempts; attempt++) {
    let circuitpyDrives = await getCircuitpyDrives();
    if(circuitpyDrives) {
      data = circuitpyDrives.join('\n');
      break;
    }
    
    await new Promise(resolve => setTimeout(resolve, 500)); //Sleep 1 sec
  }
  
  showDevices(data);
}

const handleDeviceDisconnect = async () => {
  let data = "No devices found";
  let circuitpyDrives = await getCircuitpyDrives();
  if(circuitpyDrives)
    data = circuitpyDrives.join('\n');
  
  showDevices(data);
}

//https://github.com/node-usb/node-usb-example-electron/blob/main/main.js
const showDevices = (data: any) => {
    // windows.forEach(win => {
    //     if (win) {
    //         win.webContents.send('devices', data);
    //     }
    // });
};

ipcMain.on('get-usb-devices-request', (event) => {
  console.log("Received request")
  getCircuitpyDrives().then((data) => {
    console.log("Got drives, ", data);
    event.reply('get-usb-devices-response', data);
  });
});