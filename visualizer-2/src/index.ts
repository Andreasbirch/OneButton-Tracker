import { app, BrowserWindow, ipcMain } from 'electron';
import path from 'path';
import { UsbDevice } from './models/UsbDevice';
import { Drive } from './models/Drive';
// import {WebUSB} from 'usb';
const usb = require('usb')
// import driveList from 'driveList';
const driveList = require('drivelist');

// Sources:
// https://www.electronforge.io/guides/framework-integration/react-with-typescript
// https://medium.com/@vamsikrishnaadusumalli999/creating-cross-platform-desktop-app-with-electron-js-and-react-to-understand-the-ipc-communication-518439877d9b
// https://electron-react-boilerplate.js.org/docs/native-modules/

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let win: BrowserWindow = null;
const webusb = new usb.WebUSB({
  allowAllDevices: true
});

const createWindow = (): void => {
  // Create the browser window.  
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    show: false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  });
  win = mainWindow;
  mainWindow.maximize();
  mainWindow.show();
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  webusb.addEventListener('connect', handleDeviceConnect);
  webusb.addEventListener('disconnect', handleDeviceDisconnect);
  createWindow();

  handleDeviceConnect();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  webusb.removeEventListener('connect', broadcastAvailableDevices);
  webusb.removeEventListener('disconnect', broadcastAvailableDevices);
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on('send-message', (event, arg) => {
  //execute tasks on behalf of renderer process 
  console.log(arg) // prints "ping"
});

const getAvailableCircuitpyDrives = async (): Promise<Drive[]> => {
  const drives = await driveList.list();
  if(!drives)
    return null;
  
  const usbDrives = drives.filter((drive:any) => drive.isUSB);
  const circuitpyDrives = usbDrives.filter((drive:any) =>
    drive.mountpoints.some((o:any) => o.label === 'CIRCUITPY')
  );
  if(drives.length === 0 || usbDrives.length === 0 || circuitpyDrives.length === 0)
    return [];
  
  return circuitpyDrives.map((drive:any) => {
    const circuitpyMountPoint = drive.mountpoints.find((o:any) => o.label === 'CIRCUITPY');
    return {
      device: drive.device,
      description: drive.description,
      isUSB: drive.isUSB,
      label: circuitpyMountPoint.label,
      path: circuitpyMountPoint.path
    };
  });
}

const getAvailableUSBDevices = async (): Promise<UsbDevice[]> => {
  let usbDevices = await webusb.getDevices();
  return usbDevices.map((device: any) => ({
      serialNumber: device.serialNumber,
      vendorId: device.vendorId,
      productId: device.productId
  }));
}

const handleDeviceConnect = async () => {
  let circuitpyDrives: Drive[] = [];
  let attempts = 60;
  for (let attempt = 0; attempt < attempts; attempt++) {
    let _circuitpyDrives = await getAvailableCircuitpyDrives();
    if(_circuitpyDrives) {
      circuitpyDrives = _circuitpyDrives;
      break;
    }
    
    await new Promise(resolve => setTimeout(resolve, 500)); //Sleep 1 sec
  }
  let USBDevices = await getAvailableUSBDevices(); 
  console.log(circuitpyDrives, USBDevices);
  broadcastAvailableDevices(circuitpyDrives, USBDevices);
}

const handleDeviceDisconnect = async () => {
  let circuitpyDrives = await getAvailableCircuitpyDrives();
  let USBDevices = await getAvailableUSBDevices(); 
  broadcastAvailableDevices(circuitpyDrives, USBDevices);
}


//https://github.com/node-usb/node-usb-example-electron/blob/main/main.js
const broadcastAvailableDevices = (circuitpyDrives: Drive[], usbDevices: UsbDevice[]) => {
  win.webContents.send('available-devices-broadcast', {drives: circuitpyDrives ?? [], usbDevices: usbDevices ?? []});
};

ipcMain.on('get-usb-devices-request', (event) => {
  console.log("Received request")
  getAvailableCircuitpyDrives().then((data) => {
    console.log("Got drives, ", data);
    event.reply('get-usb-devices-response', data);
  });
});

ipcMain.on('available-devices-request', (event) => {
  handleDeviceConnect();
});